#!/usr/bin/env bash

get_script_dir()
{
     SOURCE="${BASH_SOURCE[0]}"
     # While $SOURCE is a symlink, resolve it
     while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
     done
     DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
     echo "$DIR"
}

d_exists()
{
	if [[ ! -d "$@" ]]; then
		return 1
	else
		return 0
	fi
}

f_exists()
{
	if [[ ! -f "$@" ]]; then
		return 1
	else
		return 0
	fi
}

exists()
{
  f_exists "${1}" || d_exists "${1}"
}

mkd()
{
	mkdir -p "$@"
}

debug()
{
	[ $DEBUG == 1 ] && printf ".D. [%s]\n" "$@"
}

out()
{
	echo "$@"
}

# init()
# {
# 	[ $MI5_INIT == 1 ] && return 0 || return
# }

different()
{
	if ! `diff $1 $2 > /dev/null` ; then
	  return 0
	else
	  return 1
	fi
}

del()
{
  rm -v "$@"
}

entries()
{
  grep -v '^#' ${MODS_CONFIG} | while read -r line ; do
      echo $line
  done
}

export MI5_ROOT="$(get_script_dir)"
export MI5_INIT="${MI5_ROOT}/.init"
export CYANOGEN_REPO="https://github.com/CyanogenMod/android.git"
export CYANOGEN_BRANCH="cm-13.0"
export CUSTOM_REPO="https://github.com/tmaone/android.git"
export ANDROID_ROOT="${MI5_ROOT}/android"
export REPO_ROOT="${ANDROID_ROOT}/.repo"
export LOCAL_MANIFESTS="${REPO_ROOT}/local_manifests"
export CUSTOM_MANIFEST="mi5.xml"
export USE_CCACHE=1
export ANDROID_CCACHE_DIR="${MI5_ROOT}/ccache"
export ANDROID_CCACHE_SIZE="50G"
export MODS_DIR="${MI5_ROOT}/mods"
export MODS_CONFIG="${MODS_DIR}/config"
export OUT_DIR="${MI5_ROOT}/build"

vars()
{
  out MI5_ROOT "${MI5_ROOT}"
  out MI5_INIT "${MI5_INIT}"
  out CYANOGEN_REPO "${CYANOGEN_REPO}"
  out CYANOGEN_BRANCH "${CYANOGEN_BRANCH}"
  out CUSTOM_REPO "${CUSTOM_REPO}"
  out ANDROID_ROOT "${ANDROID_ROOT}"
  out REPO_ROOT "${REPO_ROOT}"
  out LOCAL_MANIFESTS "${LOCAL_MANIFESTS}"
  out CUSTOM_MANIFEST "${CUSTOM_MANIFEST}"
  out USE_CCACHE "${USE_CCACHE}"
  out ANDROID_CCACHE_DIR "${ANDROID_CCACHE_DIR}"
  out ANDROID_CCACHE_SIZE "${ANDROID_CCACHE_SIZE}"
  out MODS_DIR "${MODS_DIR}"
  out MODS_CONFIG "${MODS_CONFIG}"
  out OUT_DIR "${OUT_DIR}"
}

do_init()
{
  ! exists "${ANDROID_ROOT}" && mkd "${ANDROID_ROOT}" || out "-- ${ANDROID_ROOT} ok."
  ! exists "${REPO_ROOT}" && cd "${ANDROID_ROOT}" && repo init -u "${CYANOGEN_REPO}" -b "${CYANOGEN_BRANCH}" --depth=1 || out "-- ${REPO_ROOT} ok."
  ! exists "${LOCAL_MANIFESTS}" && cd "${REPO_ROOT}" && git clone "${CUSTOM_REPO}" "${LOCAL_MANIFESTS}" || out "-- ${LOCAL_MANIFESTS} ok."
  ! exists "${LOCAL_MANIFESTS}/${CUSTOM_MANIFEST}" && cp "${MI5_ROOT}/${CUSTOM_MANIFEST}" "${LOCAL_MANIFESTS}/${CUSTOM_MANIFEST}" || out "-- ${LOCAL_MANIFESTS}/${CUSTOM_MANIFEST} ok."
  ! exists "${ANDROID_CCACHE_DIR}" && mkd "${ANDROID_CCACHE_DIR}" || out "-- ${ANDROID_CCACHE_DIR} ok."
  ! exists "${OUT_DIR}" && mkd "${OUT_DIR}" || out "-- ${OUT_DIR} ok."
  ! exists "${ANDROID_CCACHE_DIR}/CACHEDIR.TAG" && CCACHE_DIR="${ANDROID_CCACHE_DIR}" ccache -M "${ANDROID_CCACHE_SIZE}" || out "-- ${ANDROID_CCACHE_DIR}/CACHEDIR.TAG ok."
  ! exists "${MI5_INIT}" && out "MODDED=0" > "${MI5_INIT}"
}

do_update()
{
  different "${MI5_ROOT}/${CUSTOM_MANIFEST}" "${LOCAL_MANIFESTS}/${CUSTOM_MANIFEST}" && cp "${MI5_ROOT}/${CUSTOM_MANIFEST}" "${LOCAL_MANIFESTS}/${CUSTOM_MANIFEST}" && out "-- ${LOCAL_MANIFESTS}/${CUSTOM_MANIFEST} updated."
}

init()
{
  ! exists "${MI5_INIT}" && do_init || do_update
}

clean()
{
  return 0
}

make()
{
  return 0
}

mod()
{
  return 0
}

sync()
{
  return 0
}

unmod()
{
  return 0
}

modded()
{
  exists "${MI5_INIT}" || do_init
  source "${MI5_INIT}"
  [ ${MODDED} == 1 ] && return 0 || return 1
}

# vars
init

# # if dir_ok "${MODS_DIR}/${mod}"; then
# #   if file_ok "${MODS_DIR}/${mod}/files"; then
# #     while IFS=$'\n' read -r -a file_entry
# #     do
# #       entries=(${file_entry[0]})
# #       cp -v "${MODS_DIR}/${mod}/${entries[0]}" "${ANDROID_ROOT}/${entries[1]}"
# #       if file_ok "${BUILD_DIR}/${entries[2]}"; then
# #         rm -v "${BUILD_DIR}/${entries[2]}"
# #       fi
# #     done < "${MODS_DIR}/${mod}/files"
# #   fi
# #   if dir_ok "${MODS_DIR}/${mod}/exec"; then
# #     . "${MODS_DIR}/${mod}/exec" "${MODS_DIR}/${mod}"
# #   fi
# # fi

#
